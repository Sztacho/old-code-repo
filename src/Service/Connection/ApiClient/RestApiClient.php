<?phpnamespace MNGame\Service\Connection\ApiClient;use GuzzleHttp\Client;use GuzzleHttp\Exception\ClientException;use GuzzleHttp\Exception\GuzzleException;use MNGame\Exception\ContentException;use MNGame\Service\EnvironmentService;use ReflectionClass;class RestApiClient{    public const GET = 'GET';    public const POST = 'POST';    private Client $client;    private EnvironmentService $env;    private ?string $className;    public function __construct(EnvironmentService $env, ?string $className = null)    {        $this->className = $className;        $this->client = new Client(['timeout' => 10, 'verify' => false]);        $this->env = $env;    }    /**     * @throws GuzzleException     * @throws ContentException     */    public function request(string $method, string $url, $data = null): string    {        if ($this->env->isTest()) {            if ($this->className) {                $reflection = (new ReflectionClass($this));                $name = $reflection->getNamespaceName() . ucfirst($this->className);                $class = !class_exists($name) ? new RestApiClientMockProvider() : new $name();            } else {                $class = new RestApiClientMockProvider();            }            return $class::getMock($url, json_encode($data));        }        try {            return $this->client                ->request($method, $url, empty($data) ? [] : $data)                ->getBody()                ->getContents();        } catch (ClientException $e) {            return (string)$e->getResponse()->getBody();        }    }}